# aliases and commfunctions added here, this file is then "sourced" in .bashrc
# depencies:
# GAMADV-xtd3
# (pip3 install --user --upgrade pip) - stay updated!
# pip3 install --user csvkit
# for MAC also install Homebrew and then coreutils and sqlplus

# csvkit (and other "pip" installations)
export PATH=$PATH:~/.local/bin

# correct encoding of output from sqlplus
export NLS_LANG=.AL32UTF8

ad_conf='ldaps://_ldapurl_:636'
ad_user='_userid_'

##### GAM functions
# info and actions on ChromeOS devices
cros() {
if [[ ($# -eq 2) ]] ; then
  if [[ $2 =~ ^(users|recent)$ ]] ; then
    gam info cros query id:"$1" fields "deviceid,org,serialnumber,status,model,osversion,lastsync,recentusers,macaddress"
  else
    if [[ $2 == *"/"* ]] ; then
      gam update cros query id:${1} org ${2}
    elif [[ $2 == *"GR"* ]] ; then
      gam update cros query id:${1} org /171/Elev/${2}
    elif [[ $2 == *"GY"* ]] ; then
      gam update cros query id:${1} org /170/Elev/${2}
    elif [[ $2 == *"KV"* ]] ; then
      gam update cros query id:${1} org /170/Elev/${2}
    elif [[ $2 =~ ^(enable|reenable)$ ]] ; then
      gam update cros query id:${1} action reenable
    elif [[ $2 =~ ^(disable)$ ]] ; then
      gam update cros query id:${1} action disable
    else
      echo "unknown org or command"
    fi
  fi
else
    gam info cros query id:"$1" fields "deviceid,org,serialnumber,status,model,osversion,lastsync,macaddress"
fi
}

# Search the "audit log"
report() {
  if [[ $1 == "group" ]] ; then
    gam report admin user all filter "GROUP_EMAIL==${2%%@*}@skola.malmo.se" \
        | csvcut -C actor.callerType,actor.profileId,id.customerId,id.uniqueQualifier,ipAddress,type,id.applicationName \
        | awk -F, -v green="\033[32m" -v reset="\033[0m" -v yellow="\033[43m" \
        '{{printf "%s%s", yellow,$1} ; {printf "%s%s|", reset,green} ; \
        for(i=2;i<=4;i++){printf "%s%s|", green,$i} ; {printf "%s", reset} ; for(i=5;i<=NF;i++){printf "%s|", $i} ; printf "\n"}' \
        | sed -E 's/\.[[:digit:]]{3}Z\|//g'
  elif [[ $1 == "full" ]] ; then
    gam report admin user all filter "USER_EMAIL==${2%%@*}@skola.malmo.se" \
        | csvcut -C actor.callerType,actor.profileId,id.customerId,id.uniqueQualifier,ipAddress,type,id.applicationName
  else
    gam report admin user all filter "USER_EMAIL==${1%%@*}@skola.malmo.se" \
        | csvcut -C actor.callerType,actor.profileId,id.customerId,id.uniqueQualifier,ipAddress,type,id.applicationName,USER_EMAIL \
        | awk -F, -v green="\033[32m" -v reset="\033[0m" -v yellow="\033[43m" \
        '{{printf "%s%s", yellow,$1} ; {printf "%s%s|", reset,green} ; \
        for(i=2;i<=4;i++){printf "%s%s|", green,$i} ; {printf "%s", reset} ; for(i=5;i<=NF;i++){printf "%s|", $i} ; printf "\n"}' \
        | sed -E 's/\.[[:digit:]]{3}Z\|//g' | sed 's/\"\"\"//g' | gsed -E 's/work:|work: //Ig'
  fi
}

# "crosprint" for full report, "crosprint csv" for minimal csv file
crosprint() {
  if [ $# -eq 0 ] ; then
    gam user admin get drivefile 1tQj_Zhb2OI0kAnQEk3xxbTOnfxBkusFBFppouqCBh7c format xlsx targetfolder ~/gam
  elif [[ $1 =~ ^(csv)$ ]] ; then
    gam user admin get drivefile 1tQj_Zhb2OI0kAnQEk3xxbTOnfxBkusFBFppouqCBh7c csvsheet crosprint.csv targetfolder ~/gam targetname crosprint.csv overwrite true \
         && csvcut -c 3,1,2,4,5,6 ~/gam/crosprint.csv > cros.csv
  fi
}

# transfer Drive files
transfer() {
  if [ $# -eq 0 ]; then
    echo "example code:"
    echo "transfer pelle.andersson pagy.admin private"
    echo "transfer 'old_user' 'trasnfer_to_user' [private|shared|all]"
  elif [ $# -eq 3 ]; then
    gam_command="gam create transfer ${1} drive"
    privacy_level='unset'
    if [[ $3 == "private" ]] ; then
      privacy_level='private'
    elif [[ $3 == "shared" ]] ; then
      privacy_level='shared'
    elif [[ $3 == "all" ]] ; then
      privacy_level='all'
    else
      echo "error, command should be: 'old_user' 'OU' [private|shared|all]"
      return
    fi

    # ask for confirmation
    echo -ne "Transfer ${privacy_level} files from ${1} to ${2}?\n(y/n)?"
    read answer
    if [ "$answer" != "${answer#[Yy]}" ] ;then
      gam create transfer $1 drive $2 ${privacy_level} &&\
      echo "use 'transfer show' to see latest transfers"
    else
      echo No
    fi

  elif [[ $# -eq 1 && $1 =~ ^(show|print)$ ]] ; then
    gam print transfers | awk -F, 'OFS="," {print $3,$4,$5,$9}'
  else
    echo "error, command should be: 'old_user' 'OU' [private|shared|all]"
  fi
}

# undelete user and move to /TEMP (email or 'id:[1234..]')
undelete() {
  gam undelete user $1 org /TEMP
}

# List a users classrooms including owners (or id for a deleted owner)
classroom() {
  WORK_DIR=`gmktemp -d "$HOME/gam/tmpXXXXX"`
  # check if tmp dir was created
  if [[ ! "$WORK_DIR" || ! -d "$WORK_DIR" ]]; then
    echo "Could not create temp dir"
    return
  fi
  gam redirect csv "$WORK_DIR"/tmp1 columndelimiter "|" print courses teacher $1 fields "id,name,coursestate,descriptionheading,section,ownerid"
  cat "$WORK_DIR"/tmp1 | tail -n +2 | awk -v id="id:" -F"|" '{print id$6}' | sort | uniq > "$WORK_DIR"//tmp2
  gam print users select file "$WORK_DIR"/tmp2 fields "id" | tail -n +2 > "$WORK_DIR"/tmp3
  while read r ; do id=$(echo $r | awk -F, '{print $2}') && owner=$(echo $r | awk -F, '{print $1}') && gsed -i "s/${id}/${owner}/g" "$WORK_DIR"/tmp1 ; done < "$WORK_DIR"/tmp3
  cat "$WORK_DIR"/tmp1
  trash "$WORK_DIR"
}

##### AD functions
AD() {
  if [[ $1 == "name" ]] ; then
    ldapsearch -LLL -o ldif-wrap=no -H $ad_conf -b \
      "OU=Malmo,DC=intra,DC=malmo,DC=se" -D "CN=${ad_user},OU=Employees,OU=ADM,OU=Malmo,DC=intra,DC=malmo,DC=se" \
      -y ~/gam/.pass.txt "(&(displayName=${2}* ${3}*))" \
      cn otherMailbox mail displayName department memberOf title physicalDeliveryOfficeName telephoneNumber company \
      adminDescription streetAddress division roomNumber manager mobile departmentNumber \
       > ~/gam/ldap_out.txt  && while read l ; do a=$(echo $l | awk '{print $1}') && b=$(echo $l | awk '{print $2}') && \
      if [[ $a == *"::" ]] ; then d=$(echo $b | base64 --decode) &&  c=$(echo "${a:0:-1} $d") && echo $c ; else echo $l ; fi ; done \
      < ~/gam/ldap_out.txt | tee >(grep memberOf | gegrep "17[01]G|SchoolEmployees|EDU_Students" > ~/gam/memberOf.txt) | grep -v memberOf && cat ~/gam/memberOf.txt
  elif [[ $1 =~ ^(mail|email)$ ]] ; then
    ldapsearch -LLL -o ldif-wrap=no -H $ad_conf -b \
      "OU=Malmo,DC=intra,DC=malmo,DC=se" -D "CN=${ad_user},OU=Employees,OU=ADM,OU=Malmo,DC=intra,DC=malmo,DC=se" \
      -y ~/gam/.pass.txt "(&(mail=${2}*))" \
      cn otherMailbox mail displayName department memberOf title physicalDeliveryOfficeName telephoneNumber company \
      adminDescription streetAddress division roomNumber manager mobile departmentNumber \
       > ~/gam/ldap_out.txt  && while read l ; do a=$(echo $l | awk '{print $1}') && b=$(echo $l | awk '{print $2}') && \
      if [[ $a == *"::" ]] ; then d=$(echo $b | base64 --decode) &&  c=$(echo "${a:0:-1} $d") && echo $c ; else echo $l ; fi ; done \
      < ~/gam/ldap_out.txt | tee >(grep memberOf | gegrep "17[01]G|SchoolEmployees|EDU_Students" > ~/gam/memberOf.txt) | grep -v memberOf && cat ~/gam/memberOf.txt
  elif [[ $1 =~ ^(mail_and_groups|email_and_groups)$ ]] ; then
    ldapsearch -LLL -o ldif-wrap=no -H $ad_conf -b \
      "OU=Malmo,DC=intra,DC=malmo,DC=se" -D "CN=${ad_user},OU=Employees,OU=ADM,OU=Malmo,DC=intra,DC=malmo,DC=se" \
      -y ~/gam/.pass.txt "(&(mail=${2}*))" \
      cn otherMailbox mail displayName department memberOf title physicalDeliveryOfficeName telephoneNumber company \
      adminDescription streetAddress division roomNumber manager mobile departmentNumber \
       > ~/gam/ldap_out.txt  && while read l ; do a=$(echo $l | awk '{print $1}') && b=$(echo $l | awk '{print $2}') && \
      if [[ $a == *"::" ]] ; then d=$(echo $b | base64 --decode) &&  c=$(echo "${a:0:-1} $d") && echo $c ; else echo $l ; fi ; done \
      < ~/gam/ldap_out.txt
  elif [[ $1 =~ ^(cn|CN)$ ]] ; then
    ldapsearch -LLL -o ldif-wrap=no -H $ad_conf -b \
      "OU=Malmo,DC=intra,DC=malmo,DC=se" -D "CN=${ad_user},OU=Employees,OU=ADM,OU=Malmo,DC=intra,DC=malmo,DC=se" \
      -y ~/gam/.pass.txt "(&(CN=${2}*))" \
      cn otherMailbox mail displayName department memberOf title physicalDeliveryOfficeName telephoneNumber company \
      adminDescription streetAddress division roomNumber manager mobile departmentNumber \
       > ~/gam/ldap_out.txt  && while read l ; do a=$(echo $l | awk '{print $1}') && b=$(echo $l | awk '{print $2}') && \
      if [[ $a == *"::" ]] ; then d=$(echo $b | base64 --decode) &&  c=$(echo "${a:0:-1} $d") && echo $c ; else echo $l ; fi ; done \
      < ~/gam/ldap_out.txt | tee >(grep memberOf | gegrep "17[01]G|SchoolEmployees|EDU_Students" > ~/gam/memberOf.txt) | grep -v memberOf && cat ~/gam/memberOf.txt
  else
    echo "unknown command"
  fi
}

# aliases
alias profile='nano ~/.kommandon && source ~/.kommandon'
alias gam='~/bin/gamadv-xtd3/gam'
alias kommandoupdate='bash <(curl -s -S -L https://git.io/Jesrp)'
alias updatekommando='bash <(curl -s -S -L https://git.io/Jesrp)'

### GAM
alias user='gam info user'
alias group='gam info group'
alias gamupdate='bash <(curl -s -S -L https://git.io/fhZWP) -l'
alias unsuspend='gam unsuspend user'

### EXTENS
alias pnr='~/gam/./sql.sh pnr'
alias anv='~/gam/./sql.sh anv'
alias spec='~/gam/./sql.sh spec'

# only used to set or update your AD password
alias AD_password='nano ~/password.txt && cat ~/password.txt | tr -d "\n" > ~/gam/.pass.txt && rm ~/password.txt && chmod 600 ~/gam/.pass.txt'
